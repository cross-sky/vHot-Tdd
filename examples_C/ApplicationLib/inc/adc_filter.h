#ifndef __ADC_FILTER_H
#define __ADC_FILTER_H

#include "commdata.h"

//@@@@@@@@@@@ 需要校正
/*
***************************************************************************************************
*                                       ntc对应采样电压值数组
*--------------------------------------------------------------------------------------------------
* 注释第一行：对应温度
*--------------------------------------------------------------------------------------------------
* 测量温度范围定为-20℃-80℃(可能会有零点几的数据出入),10k基准电阻
***************************************************************************************************
*/
//-20 - +80
static const uint16_t	ntcAdc10K[]={
	389	,	409	,	431	,	453	,	476	,	500	,	525	,
	550	,	577	,	604	,	632	,	662	,	692	,	723	,
	755	,	787	,	821	,	855	,	891	,	927	,	964	,
	1001,	1040,	1079,	1119,	1160,	1201,	1242,
	1285,	1328,	1371,	1415,	1459,	1504,	1548,
	1593,	1639,	1684,	1730,	1775,	1821,	1867,
	1912,	1958,	2003,	2048,	2093,	2137,	2182,
	2225,	2269,	2312,	2354,	2396,	2438,	2479,
	2519,	2559,	2598,	2636,	2674,	2711,	2748,
	2784,	2819,	2853,	2887,	2920,	2952,	2984,
	3015,	3045,	3074,	3103,	3131,	3158,	3185,
	3211,	3236,	3261,	3285,	3308,	3331,	3353,
	3374,	3395,	3415,	3435,	3454,	3473,	3491,
	3508,	3525,	3542,	3558,	3574,	3589,	3603,
	3618,	3631,	3645				
};

#define ADC10K_ARRAY_NUM	(sizeof(ntcAdc10K)/sizeof(uint16_t))
#define ADC10K_INDEX_MAX			(ADC10K_ARRAY_NUM-1)	// 数组下标的最大可用取值，对应 80℃采样值下标
#define ADC10K_INDEX_MIN			(1)						//数组下标的最小可用取值，对应-10℃采样值下标
#define ADC10K_TEMPER_REF			(-20)					//温度基准点，即下标为0时对应的温度
#define ADC10K_TEMP_LAST			80						//温度最后值，即数组最后一个对应的温度

//-20 - +120 2k基准电阻
static const uint16_t	ntcAdc10KV2[]={
	84,		89,		94,		 99,	105,	111,	117,
	123,	130,	137,	144,	152,	160,	168,
	177,	186,	196,	205,	216,	226,	237,
	249,	261,	273,	286,	300,	314,	328,
	343,	359,	374,	391,	408,	426,	444,
	463,	482,	502,	522,	544,	565,	588,
	610,	634,	658,	683,	708,	734,	760,
	787,	815,	843,	872,	901,	931,	961,
	992,	1023,	1055,	1087,	1120,	1153,	1186,
	1220,	1254,	1289,	1324,	1359,	1395,	1430,
	1466,	1502,	1539,	1575,	1612,	1649,	1685,
	1722,	1759,	1796,	1833,	1869,	1906,	1943,
	1979,	2016,	2052,	2088,	2123,	2159,	2194,
	2229,	2264,	2298,	2333,	2366,	2400,	2433,
	2466,	2498,	2526,	2558,	2588,	2619,	2649,
	2678,	2707,	2735,	2763,	2790,	2817,	2843,
	2869,	2895,	2920,	2945,	2970,	2993,	3017,
	3040,	3063,	3085,	3106,	3127,	3148,	3168,
	3188,	3208,	3228,	3247,	3266,	3285,	3303,
	3321,	3338,	3356,	3373,	3389,	3406,	3421,
	3437
};

#define ADC10KV2_ARRAY_NUM	(sizeof(ntcAdc10KV2)/sizeof(uint16_t))
#define ADC10KV2_INDEX_MAX			(ADC10KV2_ARRAY_NUM-1)	// 数组下标的最大可用取值，对应 80℃采样值下标
#define ADC10KV2_INDEX_MIN			(1)						//数组下标的最小可用取值，对应-10℃采样值下标
#define ADC10KV2_TEMPER_REF			(-20)					//温度基准点，即下标为0时对应的温度
#define ADC10KV2_TEMP_LAST			120						//温度最后值，即数组最后一个对应的温度

uint16_t uADCSearchData10K(uint16_t searchValue);
int16_t iADCTemperCalc10K(uint16_t index,uint16_t adcValue);

uint16_t uADCSearchData10KV2(uint16_t searchValue);
int16_t iADCTemperCalc10KV2(uint16_t index,uint16_t adcValue);


//5kNTC 4.7k基准，
static const uint16_t	ntcAdc5K[]={
	275 ,	287 ,	300 ,	315 ,	330 ,	346 ,	364 ,
	382 ,	401 ,	422 ,	443 ,	464 ,	486 ,	509 ,
	533 ,	558 ,	584 ,	611 ,	639 ,	668 ,	699 ,
	727 ,	756 ,	786 ,	815 ,	845 ,	876 ,	907 ,
	937 ,	969 ,	1000, 	1036, 	1071, 	1108, 	1145, 
	1183, 	1221, 	1259, 	1297, 	1337, 	1376, 	1416, 
	1456, 	1497, 	1537, 	1578, 	1619, 	1660, 	1700, 
	1741, 	1782, 	1823, 	1864, 	1904, 	1945, 	1985, 
	2025, 	2064, 	2104, 	2143, 	2181, 	2220, 	2258, 
	2295, 	2333, 	2369, 	2405, 	2441, 	2477, 	2512, 
	2546, 	2580, 	2613, 	2646, 	2678, 	2710, 	2741, 
	2771, 	2801, 	2831, 	2860, 	2888, 	2916, 	2943, 
	2970, 	2996, 	3022, 	3047, 	3071, 	3096, 	3119, 
	3142, 	3164, 	3186, 	3208, 	3229, 	3250, 	3270, 
	3289, 	3308, 	3327, 	3346, 	3363, 	3381, 	3398, 
	3415, 	3431, 	3447, 	3462, 	3477, 	3492, 		
};
#define ADC5K_ARRAY_NUM			(sizeof(ntcAdc5K)/sizeof(uint16_t))
#define ADC5K_INDEX_MAX			(ADC5K_ARRAY_NUM-1)	// 数组下标的最大可用取值，对应 80℃采样值下标
#define ADC5K_INDEX_MIN			(1)						//数组下标的最小可用取值，对应-30℃采样值下标
#define ADC5K_TEMPER_REF		(-30)					//温度基准点，即下标为0时对应的温度
#define ADC5K_TEMP_LAST			80						//温度最后值，即数组最后一个对应的温度
uint16_t uADCSearchData5K(uint16_t searchValue);
int16_t iADCTemperCalc5K(uint16_t index,uint16_t adcValue);


#endif
